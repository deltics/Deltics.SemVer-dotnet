
pool:
  name: $(AgentPool)

variables:
- group: lib.nuget
- name: buildConfiguration
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    value: release
  ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    value: debug

jobs:
- job: Versioning
  steps:
  - template: gitversion.yml

- job: BuildAndTest
  dependsOn:
    - Versioning
  steps:
    # Restore
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      arguments: '--configuration $(buildConfiguration)'
      projects: '**/*.csproj'

    # Build
  - task: DotNetCoreCLI@2
    displayName: 'dotnet build'
    inputs:
      command: build
      arguments: '--configuration $(buildConfiguration)'
      projects: '**/*.csproj'
      
    # Test
  - script: dotnet test src\SemanticVersion.Tests\SemanticVersion.Tests.csproj --no-restore --logger trx --collect "XPlat Code Coverage"
    displayName: 'dotnet test'

    # Publish test results
  - task: PublishTestResults@2
    inputs:
      failTaskOnFailedTests: true
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
      
    # Publish code coverage report
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '**/TestResults/*/coverage.cobertura.xml'
      
- job: Packaging
  dependsOn:
  - BuildAndTest
  - Versioning
  variables:
    version: $[ dependencies.Versioning.outputs['GitVersion.SemanticVersion'] ]
  steps:
    # Update version # in csproj
  - template: xmlsetvalue.yml
    parameters:
      filename: src/SemanticVersion/SemanticVersion.csproj
      tag: Version
      value: '$(version)'
    # Restore
  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      arguments: '--configuration $(buildConfiguration)'
      projects: '**/*.csproj'
    # Build
  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      arguments: '--configuration $(buildConfiguration)'
      projects: '**/*.csproj'
    # Package
  - task: DotNetCoreCLI@2
    displayName: dotnet pack
    inputs:
      command: pack
      arguments: '--configuration $(buildConfiguration)'
      packagesToPack: 'src/SemanticVersion/SemanticVersion.csproj'
      nobuild: true # already built in the previous step
      versioningScheme: off
    # Publish Artifacts
  - task: PublishPipelineArtifact@1
    displayName: Publish pipeline artifacts
    inputs:
      targetPath: '$(Pipeline.Workspace)'
      artifactName: packages
      artifactType: pipeline   

  # Publish package to either the internal feed (pre-release) or nuget (release)
- job: Publishing
  dependsOn:
  - Packaging
  variables:
    apiKey: $(lib.nuget.apiKey)
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: Download pipeline packages artifact
    inputs:
      artifact: packages
      path: '$(Build.ArtifactStagingDirectory)'     

    # Builds produced on branches OTHER than MASTER are pushed to the internal feed.
    #
    # allowPackageConflicts true allows us to build the same version multiple times and 
    #  not throw an error when trying to push, overwriting the previous published build
    #  of that version
  - task: NuGetCommand@2
    displayName: 'push to internal/azure feed'
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    inputs:
      command: push
      feedsToUse: select
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType: internal
      publishVstsFeed: Feed
      versioningScheme: off
      allowPackageConflicts: true

    # Publish packages from MASTER to nuget
  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: push to nuget.org (using workaround)
    inputs:
      command: custom
      custom: nuget
      arguments: >
        push $(Build.ArtifactStagingDirectory)/**/*.nupkg
        -s https://api.nuget.org/v3/index.json
        -k $(apiKey)

# This SHOULD work for nuget, but dotnet cli doesn't support encrypted ApiKeys,
#  so for now we have to use the work-around alternative above
#
#  - task: DotNetCoreCLI@2
#    displayName: "push to nuget.org"
#    inputs:
#      command: 'push'
#      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#      nuGetFeedType: 'external'
#      publishFeedCredentials: 'NugetOrgApiKey'